// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_pb3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fpb3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fpb3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fpb3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fpb3_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fpb3_2eproto;
namespace GameServerMsg {
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class SimpleMsg;
class SimpleMsgDefaultTypeInternal;
extern SimpleMsgDefaultTypeInternal _SimpleMsg_default_instance_;
class TimeStamp;
class TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
}  // namespace GameServerMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::GameServerMsg::PlayerInfo* Arena::CreateMaybeMessage<::GameServerMsg::PlayerInfo>(Arena*);
template<> ::GameServerMsg::SimpleMsg* Arena::CreateMaybeMessage<::GameServerMsg::SimpleMsg>(Arena*);
template<> ::GameServerMsg::TimeStamp* Arena::CreateMaybeMessage<::GameServerMsg::TimeStamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GameServerMsg {

enum SimpleMsg_Task : int {
  SimpleMsg_Task_Echo = 0,
  SimpleMsg_Task_Time = 1,
  SimpleMsg_Task_Login = 2,
  SimpleMsg_Task_Logout = 3,
  SimpleMsg_Task_Query = 4,
  SimpleMsg_Task_SimpleMsg_Task_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SimpleMsg_Task_SimpleMsg_Task_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SimpleMsg_Task_IsValid(int value);
constexpr SimpleMsg_Task SimpleMsg_Task_Task_MIN = SimpleMsg_Task_Echo;
constexpr SimpleMsg_Task SimpleMsg_Task_Task_MAX = SimpleMsg_Task_Query;
constexpr int SimpleMsg_Task_Task_ARRAYSIZE = SimpleMsg_Task_Task_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleMsg_Task_descriptor();
template<typename T>
inline const std::string& SimpleMsg_Task_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimpleMsg_Task>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimpleMsg_Task_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimpleMsg_Task_descriptor(), enum_t_value);
}
inline bool SimpleMsg_Task_Parse(
    const std::string& name, SimpleMsg_Task* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimpleMsg_Task>(
    SimpleMsg_Task_descriptor(), name, value);
}
// ===================================================================

class TimeStamp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameServerMsg.TimeStamp) */ {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeStamp* New() const final {
    return CreateMaybeMessage<TimeStamp>(nullptr);
  }

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameServerMsg.TimeStamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fpb3_2eproto);
    return ::descriptor_table_msg_5fpb3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTStampFieldNumber = 1,
  };
  // int64 t_stamp = 1;
  void clear_t_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 t_stamp() const;
  void set_t_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_t_stamp() const;
  void _internal_set_t_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:GameServerMsg.TimeStamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 t_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fpb3_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameServerMsg.PlayerInfo) */ {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameServerMsg.PlayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fpb3_2eproto);
    return ::descriptor_table_msg_5fpb3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTOnlineFieldNumber = 4,
    kTOfflineFieldNumber = 5,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .GameServerMsg.TimeStamp t_online = 4;
  bool has_t_online() const;
  private:
  bool _internal_has_t_online() const;
  public:
  void clear_t_online();
  const ::GameServerMsg::TimeStamp& t_online() const;
  ::GameServerMsg::TimeStamp* release_t_online();
  ::GameServerMsg::TimeStamp* mutable_t_online();
  void set_allocated_t_online(::GameServerMsg::TimeStamp* t_online);
  private:
  const ::GameServerMsg::TimeStamp& _internal_t_online() const;
  ::GameServerMsg::TimeStamp* _internal_mutable_t_online();
  public:

  // .GameServerMsg.TimeStamp t_offline = 5;
  bool has_t_offline() const;
  private:
  bool _internal_has_t_offline() const;
  public:
  void clear_t_offline();
  const ::GameServerMsg::TimeStamp& t_offline() const;
  ::GameServerMsg::TimeStamp* release_t_offline();
  ::GameServerMsg::TimeStamp* mutable_t_offline();
  void set_allocated_t_offline(::GameServerMsg::TimeStamp* t_offline);
  private:
  const ::GameServerMsg::TimeStamp& _internal_t_offline() const;
  ::GameServerMsg::TimeStamp* _internal_mutable_t_offline();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameServerMsg.PlayerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::GameServerMsg::TimeStamp* t_online_;
  ::GameServerMsg::TimeStamp* t_offline_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fpb3_2eproto;
};
// -------------------------------------------------------------------

class SimpleMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameServerMsg.SimpleMsg) */ {
 public:
  SimpleMsg();
  virtual ~SimpleMsg();

  SimpleMsg(const SimpleMsg& from);
  SimpleMsg(SimpleMsg&& from) noexcept
    : SimpleMsg() {
    *this = ::std::move(from);
  }

  inline SimpleMsg& operator=(const SimpleMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleMsg& operator=(SimpleMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleMsg* internal_default_instance() {
    return reinterpret_cast<const SimpleMsg*>(
               &_SimpleMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimpleMsg& a, SimpleMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleMsg* New() const final {
    return CreateMaybeMessage<SimpleMsg>(nullptr);
  }

  SimpleMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleMsg& from);
  void MergeFrom(const SimpleMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameServerMsg.SimpleMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fpb3_2eproto);
    return ::descriptor_table_msg_5fpb3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SimpleMsg_Task Task;
  static constexpr Task Echo =
    SimpleMsg_Task_Echo;
  static constexpr Task Time =
    SimpleMsg_Task_Time;
  static constexpr Task Login =
    SimpleMsg_Task_Login;
  static constexpr Task Logout =
    SimpleMsg_Task_Logout;
  static constexpr Task Query =
    SimpleMsg_Task_Query;
  static inline bool Task_IsValid(int value) {
    return SimpleMsg_Task_IsValid(value);
  }
  static constexpr Task Task_MIN =
    SimpleMsg_Task_Task_MIN;
  static constexpr Task Task_MAX =
    SimpleMsg_Task_Task_MAX;
  static constexpr int Task_ARRAYSIZE =
    SimpleMsg_Task_Task_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Task_descriptor() {
    return SimpleMsg_Task_descriptor();
  }
  template<typename T>
  static inline const std::string& Task_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Task>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Task_Name.");
    return SimpleMsg_Task_Name(enum_t_value);
  }
  static inline bool Task_Parse(const std::string& name,
      Task* value) {
    return SimpleMsg_Task_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kContentFieldNumber = 4,
    kTCurrFieldNumber = 3,
    kPlayerInfoFieldNumber = 5,
    kIdFieldNumber = 1,
    kRequestFieldNumber = 15,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 4;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .GameServerMsg.TimeStamp t_curr = 3;
  bool has_t_curr() const;
  private:
  bool _internal_has_t_curr() const;
  public:
  void clear_t_curr();
  const ::GameServerMsg::TimeStamp& t_curr() const;
  ::GameServerMsg::TimeStamp* release_t_curr();
  ::GameServerMsg::TimeStamp* mutable_t_curr();
  void set_allocated_t_curr(::GameServerMsg::TimeStamp* t_curr);
  private:
  const ::GameServerMsg::TimeStamp& _internal_t_curr() const;
  ::GameServerMsg::TimeStamp* _internal_mutable_t_curr();
  public:

  // .GameServerMsg.PlayerInfo player_info = 5;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::GameServerMsg::PlayerInfo& player_info() const;
  ::GameServerMsg::PlayerInfo* release_player_info();
  ::GameServerMsg::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::GameServerMsg::PlayerInfo* player_info);
  private:
  const ::GameServerMsg::PlayerInfo& _internal_player_info() const;
  ::GameServerMsg::PlayerInfo* _internal_mutable_player_info();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .GameServerMsg.SimpleMsg.Task request = 15;
  void clear_request();
  ::GameServerMsg::SimpleMsg_Task request() const;
  void set_request(::GameServerMsg::SimpleMsg_Task value);
  private:
  ::GameServerMsg::SimpleMsg_Task _internal_request() const;
  void _internal_set_request(::GameServerMsg::SimpleMsg_Task value);
  public:

  // @@protoc_insertion_point(class_scope:GameServerMsg.SimpleMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::GameServerMsg::TimeStamp* t_curr_;
  ::GameServerMsg::PlayerInfo* player_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fpb3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeStamp

// int64 t_stamp = 1;
inline void TimeStamp::clear_t_stamp() {
  t_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeStamp::_internal_t_stamp() const {
  return t_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeStamp::t_stamp() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.TimeStamp.t_stamp)
  return _internal_t_stamp();
}
inline void TimeStamp::_internal_set_t_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  t_stamp_ = value;
}
inline void TimeStamp::set_t_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_t_stamp(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.TimeStamp.t_stamp)
}

// -------------------------------------------------------------------

// PlayerInfo

// int64 id = 1;
inline void PlayerInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.PlayerInfo.id)
  return _internal_id();
}
inline void PlayerInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void PlayerInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.PlayerInfo.id)
}

// string name = 2;
inline void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.PlayerInfo.name)
  return _internal_name();
}
inline void PlayerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.PlayerInfo.name)
}
inline std::string* PlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.PlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PlayerInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void PlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameServerMsg.PlayerInfo.name)
}
inline void PlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameServerMsg.PlayerInfo.name)
}
inline void PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameServerMsg.PlayerInfo.name)
}
inline std::string* PlayerInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:GameServerMsg.PlayerInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.PlayerInfo.name)
}

// uint32 level = 3;
inline void PlayerInfo::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.PlayerInfo.level)
  return _internal_level();
}
inline void PlayerInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void PlayerInfo::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.PlayerInfo.level)
}

// .GameServerMsg.TimeStamp t_online = 4;
inline bool PlayerInfo::_internal_has_t_online() const {
  return this != internal_default_instance() && t_online_ != nullptr;
}
inline bool PlayerInfo::has_t_online() const {
  return _internal_has_t_online();
}
inline void PlayerInfo::clear_t_online() {
  if (GetArenaNoVirtual() == nullptr && t_online_ != nullptr) {
    delete t_online_;
  }
  t_online_ = nullptr;
}
inline const ::GameServerMsg::TimeStamp& PlayerInfo::_internal_t_online() const {
  const ::GameServerMsg::TimeStamp* p = t_online_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GameServerMsg::TimeStamp*>(
      &::GameServerMsg::_TimeStamp_default_instance_);
}
inline const ::GameServerMsg::TimeStamp& PlayerInfo::t_online() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.PlayerInfo.t_online)
  return _internal_t_online();
}
inline ::GameServerMsg::TimeStamp* PlayerInfo::release_t_online() {
  // @@protoc_insertion_point(field_release:GameServerMsg.PlayerInfo.t_online)
  
  ::GameServerMsg::TimeStamp* temp = t_online_;
  t_online_ = nullptr;
  return temp;
}
inline ::GameServerMsg::TimeStamp* PlayerInfo::_internal_mutable_t_online() {
  
  if (t_online_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameServerMsg::TimeStamp>(GetArenaNoVirtual());
    t_online_ = p;
  }
  return t_online_;
}
inline ::GameServerMsg::TimeStamp* PlayerInfo::mutable_t_online() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.PlayerInfo.t_online)
  return _internal_mutable_t_online();
}
inline void PlayerInfo::set_allocated_t_online(::GameServerMsg::TimeStamp* t_online) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete t_online_;
  }
  if (t_online) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t_online = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_online, submessage_arena);
    }
    
  } else {
    
  }
  t_online_ = t_online;
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.PlayerInfo.t_online)
}

// .GameServerMsg.TimeStamp t_offline = 5;
inline bool PlayerInfo::_internal_has_t_offline() const {
  return this != internal_default_instance() && t_offline_ != nullptr;
}
inline bool PlayerInfo::has_t_offline() const {
  return _internal_has_t_offline();
}
inline void PlayerInfo::clear_t_offline() {
  if (GetArenaNoVirtual() == nullptr && t_offline_ != nullptr) {
    delete t_offline_;
  }
  t_offline_ = nullptr;
}
inline const ::GameServerMsg::TimeStamp& PlayerInfo::_internal_t_offline() const {
  const ::GameServerMsg::TimeStamp* p = t_offline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GameServerMsg::TimeStamp*>(
      &::GameServerMsg::_TimeStamp_default_instance_);
}
inline const ::GameServerMsg::TimeStamp& PlayerInfo::t_offline() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.PlayerInfo.t_offline)
  return _internal_t_offline();
}
inline ::GameServerMsg::TimeStamp* PlayerInfo::release_t_offline() {
  // @@protoc_insertion_point(field_release:GameServerMsg.PlayerInfo.t_offline)
  
  ::GameServerMsg::TimeStamp* temp = t_offline_;
  t_offline_ = nullptr;
  return temp;
}
inline ::GameServerMsg::TimeStamp* PlayerInfo::_internal_mutable_t_offline() {
  
  if (t_offline_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameServerMsg::TimeStamp>(GetArenaNoVirtual());
    t_offline_ = p;
  }
  return t_offline_;
}
inline ::GameServerMsg::TimeStamp* PlayerInfo::mutable_t_offline() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.PlayerInfo.t_offline)
  return _internal_mutable_t_offline();
}
inline void PlayerInfo::set_allocated_t_offline(::GameServerMsg::TimeStamp* t_offline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete t_offline_;
  }
  if (t_offline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t_offline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_offline, submessage_arena);
    }
    
  } else {
    
  }
  t_offline_ = t_offline;
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.PlayerInfo.t_offline)
}

// -------------------------------------------------------------------

// SimpleMsg

// int64 id = 1;
inline void SimpleMsg::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SimpleMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SimpleMsg::id() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.SimpleMsg.id)
  return _internal_id();
}
inline void SimpleMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void SimpleMsg::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.SimpleMsg.id)
}

// string name = 2;
inline void SimpleMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimpleMsg::name() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.SimpleMsg.name)
  return _internal_name();
}
inline void SimpleMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.SimpleMsg.name)
}
inline std::string* SimpleMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.SimpleMsg.name)
  return _internal_mutable_name();
}
inline const std::string& SimpleMsg::_internal_name() const {
  return name_.GetNoArena();
}
inline void SimpleMsg::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimpleMsg::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameServerMsg.SimpleMsg.name)
}
inline void SimpleMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameServerMsg.SimpleMsg.name)
}
inline void SimpleMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameServerMsg.SimpleMsg.name)
}
inline std::string* SimpleMsg::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimpleMsg::release_name() {
  // @@protoc_insertion_point(field_release:GameServerMsg.SimpleMsg.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.SimpleMsg.name)
}

// .GameServerMsg.TimeStamp t_curr = 3;
inline bool SimpleMsg::_internal_has_t_curr() const {
  return this != internal_default_instance() && t_curr_ != nullptr;
}
inline bool SimpleMsg::has_t_curr() const {
  return _internal_has_t_curr();
}
inline void SimpleMsg::clear_t_curr() {
  if (GetArenaNoVirtual() == nullptr && t_curr_ != nullptr) {
    delete t_curr_;
  }
  t_curr_ = nullptr;
}
inline const ::GameServerMsg::TimeStamp& SimpleMsg::_internal_t_curr() const {
  const ::GameServerMsg::TimeStamp* p = t_curr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GameServerMsg::TimeStamp*>(
      &::GameServerMsg::_TimeStamp_default_instance_);
}
inline const ::GameServerMsg::TimeStamp& SimpleMsg::t_curr() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.SimpleMsg.t_curr)
  return _internal_t_curr();
}
inline ::GameServerMsg::TimeStamp* SimpleMsg::release_t_curr() {
  // @@protoc_insertion_point(field_release:GameServerMsg.SimpleMsg.t_curr)
  
  ::GameServerMsg::TimeStamp* temp = t_curr_;
  t_curr_ = nullptr;
  return temp;
}
inline ::GameServerMsg::TimeStamp* SimpleMsg::_internal_mutable_t_curr() {
  
  if (t_curr_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameServerMsg::TimeStamp>(GetArenaNoVirtual());
    t_curr_ = p;
  }
  return t_curr_;
}
inline ::GameServerMsg::TimeStamp* SimpleMsg::mutable_t_curr() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.SimpleMsg.t_curr)
  return _internal_mutable_t_curr();
}
inline void SimpleMsg::set_allocated_t_curr(::GameServerMsg::TimeStamp* t_curr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete t_curr_;
  }
  if (t_curr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t_curr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_curr, submessage_arena);
    }
    
  } else {
    
  }
  t_curr_ = t_curr;
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.SimpleMsg.t_curr)
}

// string content = 4;
inline void SimpleMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimpleMsg::content() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.SimpleMsg.content)
  return _internal_content();
}
inline void SimpleMsg::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.SimpleMsg.content)
}
inline std::string* SimpleMsg::mutable_content() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.SimpleMsg.content)
  return _internal_mutable_content();
}
inline const std::string& SimpleMsg::_internal_content() const {
  return content_.GetNoArena();
}
inline void SimpleMsg::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimpleMsg::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameServerMsg.SimpleMsg.content)
}
inline void SimpleMsg::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameServerMsg.SimpleMsg.content)
}
inline void SimpleMsg::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameServerMsg.SimpleMsg.content)
}
inline std::string* SimpleMsg::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimpleMsg::release_content() {
  // @@protoc_insertion_point(field_release:GameServerMsg.SimpleMsg.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleMsg::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.SimpleMsg.content)
}

// .GameServerMsg.PlayerInfo player_info = 5;
inline bool SimpleMsg::_internal_has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline bool SimpleMsg::has_player_info() const {
  return _internal_has_player_info();
}
inline void SimpleMsg::clear_player_info() {
  if (GetArenaNoVirtual() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
inline const ::GameServerMsg::PlayerInfo& SimpleMsg::_internal_player_info() const {
  const ::GameServerMsg::PlayerInfo* p = player_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GameServerMsg::PlayerInfo*>(
      &::GameServerMsg::_PlayerInfo_default_instance_);
}
inline const ::GameServerMsg::PlayerInfo& SimpleMsg::player_info() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.SimpleMsg.player_info)
  return _internal_player_info();
}
inline ::GameServerMsg::PlayerInfo* SimpleMsg::release_player_info() {
  // @@protoc_insertion_point(field_release:GameServerMsg.SimpleMsg.player_info)
  
  ::GameServerMsg::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::GameServerMsg::PlayerInfo* SimpleMsg::_internal_mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameServerMsg::PlayerInfo>(GetArenaNoVirtual());
    player_info_ = p;
  }
  return player_info_;
}
inline ::GameServerMsg::PlayerInfo* SimpleMsg::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:GameServerMsg.SimpleMsg.player_info)
  return _internal_mutable_player_info();
}
inline void SimpleMsg::set_allocated_player_info(::GameServerMsg::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:GameServerMsg.SimpleMsg.player_info)
}

// .GameServerMsg.SimpleMsg.Task request = 15;
inline void SimpleMsg::clear_request() {
  request_ = 0;
}
inline ::GameServerMsg::SimpleMsg_Task SimpleMsg::_internal_request() const {
  return static_cast< ::GameServerMsg::SimpleMsg_Task >(request_);
}
inline ::GameServerMsg::SimpleMsg_Task SimpleMsg::request() const {
  // @@protoc_insertion_point(field_get:GameServerMsg.SimpleMsg.request)
  return _internal_request();
}
inline void SimpleMsg::_internal_set_request(::GameServerMsg::SimpleMsg_Task value) {
  
  request_ = value;
}
inline void SimpleMsg::set_request(::GameServerMsg::SimpleMsg_Task value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:GameServerMsg.SimpleMsg.request)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameServerMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameServerMsg::SimpleMsg_Task> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameServerMsg::SimpleMsg_Task>() {
  return ::GameServerMsg::SimpleMsg_Task_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fpb3_2eproto
