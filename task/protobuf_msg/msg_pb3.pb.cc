// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_pb3.proto

#include "msg_pb3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_5fpb3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfo_msg_5fpb3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_5fpb3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeStamp_msg_5fpb3_2eproto;
namespace GameServerMsg {
class TimeStampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeStamp> _instance;
} _TimeStamp_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class SimpleMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleMsg> _instance;
} _SimpleMsg_default_instance_;
}  // namespace GameServerMsg
static void InitDefaultsscc_info_PlayerInfo_msg_5fpb3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameServerMsg::_PlayerInfo_default_instance_;
    new (ptr) ::GameServerMsg::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameServerMsg::PlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfo_msg_5fpb3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInfo_msg_5fpb3_2eproto}, {
      &scc_info_TimeStamp_msg_5fpb3_2eproto.base,}};

static void InitDefaultsscc_info_SimpleMsg_msg_5fpb3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameServerMsg::_SimpleMsg_default_instance_;
    new (ptr) ::GameServerMsg::SimpleMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameServerMsg::SimpleMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimpleMsg_msg_5fpb3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimpleMsg_msg_5fpb3_2eproto}, {
      &scc_info_TimeStamp_msg_5fpb3_2eproto.base,
      &scc_info_PlayerInfo_msg_5fpb3_2eproto.base,}};

static void InitDefaultsscc_info_TimeStamp_msg_5fpb3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameServerMsg::_TimeStamp_default_instance_;
    new (ptr) ::GameServerMsg::TimeStamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameServerMsg::TimeStamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeStamp_msg_5fpb3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeStamp_msg_5fpb3_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fpb3_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_5fpb3_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fpb3_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fpb3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::TimeStamp, t_stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::PlayerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::PlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::PlayerInfo, level_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::PlayerInfo, t_online_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::PlayerInfo, t_offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, id_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, name_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, t_curr_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, content_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, player_info_),
  PROTOBUF_FIELD_OFFSET(::GameServerMsg::SimpleMsg, request_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameServerMsg::TimeStamp)},
  { 6, -1, sizeof(::GameServerMsg::PlayerInfo)},
  { 16, -1, sizeof(::GameServerMsg::SimpleMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameServerMsg::_TimeStamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameServerMsg::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameServerMsg::_SimpleMsg_default_instance_),
};

const char descriptor_table_protodef_msg_5fpb3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmsg_pb3.proto\022\rGameServerMsg\"\034\n\tTimeSt"
  "amp\022\017\n\007t_stamp\030\001 \001(\003\"\216\001\n\nPlayerInfo\022\n\n\002i"
  "d\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022*\n\010"
  "t_online\030\004 \001(\0132\030.GameServerMsg.TimeStamp"
  "\022+\n\tt_offline\030\005 \001(\0132\030.GameServerMsg.Time"
  "Stamp\"\376\001\n\tSimpleMsg\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030"
  "\002 \001(\t\022(\n\006t_curr\030\003 \001(\0132\030.GameServerMsg.Ti"
  "meStamp\022\017\n\007content\030\004 \001(\t\022.\n\013player_info\030"
  "\005 \001(\0132\031.GameServerMsg.PlayerInfo\022.\n\007requ"
  "est\030\017 \001(\0162\035.GameServerMsg.SimpleMsg.Task"
  "\"<\n\004Task\022\010\n\004Echo\020\000\022\010\n\004Time\020\001\022\t\n\005Login\020\002\022"
  "\n\n\006Logout\020\003\022\t\n\005Query\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fpb3_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fpb3_2eproto_sccs[3] = {
  &scc_info_PlayerInfo_msg_5fpb3_2eproto.base,
  &scc_info_SimpleMsg_msg_5fpb3_2eproto.base,
  &scc_info_TimeStamp_msg_5fpb3_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fpb3_2eproto_once;
static bool descriptor_table_msg_5fpb3_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fpb3_2eproto = {
  &descriptor_table_msg_5fpb3_2eproto_initialized, descriptor_table_protodef_msg_5fpb3_2eproto, "msg_pb3.proto", 470,
  &descriptor_table_msg_5fpb3_2eproto_once, descriptor_table_msg_5fpb3_2eproto_sccs, descriptor_table_msg_5fpb3_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_msg_5fpb3_2eproto::offsets,
  file_level_metadata_msg_5fpb3_2eproto, 3, file_level_enum_descriptors_msg_5fpb3_2eproto, file_level_service_descriptors_msg_5fpb3_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fpb3_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fpb3_2eproto), true);
namespace GameServerMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleMsg_Task_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fpb3_2eproto);
  return file_level_enum_descriptors_msg_5fpb3_2eproto[0];
}
bool SimpleMsg_Task_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SimpleMsg_Task SimpleMsg::Echo;
constexpr SimpleMsg_Task SimpleMsg::Time;
constexpr SimpleMsg_Task SimpleMsg::Login;
constexpr SimpleMsg_Task SimpleMsg::Logout;
constexpr SimpleMsg_Task SimpleMsg::Query;
constexpr SimpleMsg_Task SimpleMsg::Task_MIN;
constexpr SimpleMsg_Task SimpleMsg::Task_MAX;
constexpr int SimpleMsg::Task_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TimeStamp::InitAsDefaultInstance() {
}
class TimeStamp::_Internal {
 public:
};

TimeStamp::TimeStamp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameServerMsg.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  t_stamp_ = from.t_stamp_;
  // @@protoc_insertion_point(copy_constructor:GameServerMsg.TimeStamp)
}

void TimeStamp::SharedCtor() {
  t_stamp_ = PROTOBUF_LONGLONG(0);
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:GameServerMsg.TimeStamp)
  SharedDtor();
}

void TimeStamp::SharedDtor() {
}

void TimeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeStamp& TimeStamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeStamp_msg_5fpb3_2eproto.base);
  return *internal_default_instance();
}


void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerMsg.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_stamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TimeStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 t_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          t_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeStamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerMsg.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 t_stamp = 1;
  if (this->t_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_t_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerMsg.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerMsg.TimeStamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 t_stamp = 1;
  if (this->t_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_t_stamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeStamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerMsg.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeStamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerMsg.TimeStamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerMsg.TimeStamp)
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerMsg.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t_stamp() != 0) {
    _internal_set_t_stamp(from._internal_t_stamp());
  }
}

void TimeStamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerMsg.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerMsg.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(t_stamp_, other->t_stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeStamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
  ::GameServerMsg::_PlayerInfo_default_instance_._instance.get_mutable()->t_online_ = const_cast< ::GameServerMsg::TimeStamp*>(
      ::GameServerMsg::TimeStamp::internal_default_instance());
  ::GameServerMsg::_PlayerInfo_default_instance_._instance.get_mutable()->t_offline_ = const_cast< ::GameServerMsg::TimeStamp*>(
      ::GameServerMsg::TimeStamp::internal_default_instance());
}
class PlayerInfo::_Internal {
 public:
  static const ::GameServerMsg::TimeStamp& t_online(const PlayerInfo* msg);
  static const ::GameServerMsg::TimeStamp& t_offline(const PlayerInfo* msg);
};

const ::GameServerMsg::TimeStamp&
PlayerInfo::_Internal::t_online(const PlayerInfo* msg) {
  return *msg->t_online_;
}
const ::GameServerMsg::TimeStamp&
PlayerInfo::_Internal::t_offline(const PlayerInfo* msg) {
  return *msg->t_offline_;
}
PlayerInfo::PlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameServerMsg.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_t_online()) {
    t_online_ = new ::GameServerMsg::TimeStamp(*from.t_online_);
  } else {
    t_online_ = nullptr;
  }
  if (from._internal_has_t_offline()) {
    t_offline_ = new ::GameServerMsg::TimeStamp(*from.t_offline_);
  } else {
    t_offline_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:GameServerMsg.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfo_msg_5fpb3_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&t_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&t_online_)) + sizeof(level_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:GameServerMsg.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_online_;
  if (this != internal_default_instance()) delete t_offline_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_msg_5fpb3_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerMsg.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && t_online_ != nullptr) {
    delete t_online_;
  }
  t_online_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && t_offline_ != nullptr) {
    delete t_offline_;
  }
  t_offline_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameServerMsg.PlayerInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameServerMsg.TimeStamp t_online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_online(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameServerMsg.TimeStamp t_offline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_offline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerMsg.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameServerMsg.PlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // .GameServerMsg.TimeStamp t_online = 4;
  if (this->has_t_online()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::t_online(this), target, stream);
  }

  // .GameServerMsg.TimeStamp t_offline = 5;
  if (this->has_t_offline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::t_offline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerMsg.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerMsg.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .GameServerMsg.TimeStamp t_online = 4;
  if (this->has_t_online()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_online_);
  }

  // .GameServerMsg.TimeStamp t_offline = 5;
  if (this->has_t_offline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_offline_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerMsg.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerMsg.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerMsg.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerMsg.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_t_online()) {
    _internal_mutable_t_online()->::GameServerMsg::TimeStamp::MergeFrom(from._internal_t_online());
  }
  if (from.has_t_offline()) {
    _internal_mutable_t_offline()->::GameServerMsg::TimeStamp::MergeFrom(from._internal_t_offline());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerMsg.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerMsg.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(t_online_, other->t_online_);
  swap(t_offline_, other->t_offline_);
  swap(id_, other->id_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleMsg::InitAsDefaultInstance() {
  ::GameServerMsg::_SimpleMsg_default_instance_._instance.get_mutable()->t_curr_ = const_cast< ::GameServerMsg::TimeStamp*>(
      ::GameServerMsg::TimeStamp::internal_default_instance());
  ::GameServerMsg::_SimpleMsg_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::GameServerMsg::PlayerInfo*>(
      ::GameServerMsg::PlayerInfo::internal_default_instance());
}
class SimpleMsg::_Internal {
 public:
  static const ::GameServerMsg::TimeStamp& t_curr(const SimpleMsg* msg);
  static const ::GameServerMsg::PlayerInfo& player_info(const SimpleMsg* msg);
};

const ::GameServerMsg::TimeStamp&
SimpleMsg::_Internal::t_curr(const SimpleMsg* msg) {
  return *msg->t_curr_;
}
const ::GameServerMsg::PlayerInfo&
SimpleMsg::_Internal::player_info(const SimpleMsg* msg) {
  return *msg->player_info_;
}
SimpleMsg::SimpleMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameServerMsg.SimpleMsg)
}
SimpleMsg::SimpleMsg(const SimpleMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_t_curr()) {
    t_curr_ = new ::GameServerMsg::TimeStamp(*from.t_curr_);
  } else {
    t_curr_ = nullptr;
  }
  if (from._internal_has_player_info()) {
    player_info_ = new ::GameServerMsg::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_) -
    reinterpret_cast<char*>(&id_)) + sizeof(request_));
  // @@protoc_insertion_point(copy_constructor:GameServerMsg.SimpleMsg)
}

void SimpleMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleMsg_msg_5fpb3_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&t_curr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&t_curr_)) + sizeof(request_));
}

SimpleMsg::~SimpleMsg() {
  // @@protoc_insertion_point(destructor:GameServerMsg.SimpleMsg)
  SharedDtor();
}

void SimpleMsg::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_curr_;
  if (this != internal_default_instance()) delete player_info_;
}

void SimpleMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleMsg& SimpleMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleMsg_msg_5fpb3_2eproto.base);
  return *internal_default_instance();
}


void SimpleMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerMsg.SimpleMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && t_curr_ != nullptr) {
    delete t_curr_;
  }
  t_curr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&id_)) + sizeof(request_));
  _internal_metadata_.Clear();
}

const char* SimpleMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameServerMsg.SimpleMsg.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameServerMsg.TimeStamp t_curr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_curr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameServerMsg.SimpleMsg.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameServerMsg.PlayerInfo player_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameServerMsg.SimpleMsg.Task request = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_request(static_cast<::GameServerMsg::SimpleMsg_Task>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerMsg.SimpleMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameServerMsg.SimpleMsg.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .GameServerMsg.TimeStamp t_curr = 3;
  if (this->has_t_curr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t_curr(this), target, stream);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameServerMsg.SimpleMsg.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  // .GameServerMsg.PlayerInfo player_info = 5;
  if (this->has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_info(this), target, stream);
  }

  // .GameServerMsg.SimpleMsg.Task request = 15;
  if (this->request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerMsg.SimpleMsg)
  return target;
}

size_t SimpleMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerMsg.SimpleMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .GameServerMsg.TimeStamp t_curr = 3;
  if (this->has_t_curr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_curr_);
  }

  // .GameServerMsg.PlayerInfo player_info = 5;
  if (this->has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .GameServerMsg.SimpleMsg.Task request = 15;
  if (this->request() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerMsg.SimpleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerMsg.SimpleMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerMsg.SimpleMsg)
    MergeFrom(*source);
  }
}

void SimpleMsg::MergeFrom(const SimpleMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerMsg.SimpleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_t_curr()) {
    _internal_mutable_t_curr()->::GameServerMsg::TimeStamp::MergeFrom(from._internal_t_curr());
  }
  if (from.has_player_info()) {
    _internal_mutable_player_info()->::GameServerMsg::PlayerInfo::MergeFrom(from._internal_player_info());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.request() != 0) {
    _internal_set_request(from._internal_request());
  }
}

void SimpleMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerMsg.SimpleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMsg::CopyFrom(const SimpleMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerMsg.SimpleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMsg::IsInitialized() const {
  return true;
}

void SimpleMsg::InternalSwap(SimpleMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(t_curr_, other->t_curr_);
  swap(player_info_, other->player_info_);
  swap(id_, other->id_);
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameServerMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameServerMsg::TimeStamp* Arena::CreateMaybeMessage< ::GameServerMsg::TimeStamp >(Arena* arena) {
  return Arena::CreateInternal< ::GameServerMsg::TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::GameServerMsg::PlayerInfo* Arena::CreateMaybeMessage< ::GameServerMsg::PlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GameServerMsg::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GameServerMsg::SimpleMsg* Arena::CreateMaybeMessage< ::GameServerMsg::SimpleMsg >(Arena* arena) {
  return Arena::CreateInternal< ::GameServerMsg::SimpleMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
